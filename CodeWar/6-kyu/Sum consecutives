//Kata Description
Description:

You are given a list/array which contains only integers (positive and negative). Your job is to sum only the numbers that are the same and consecutive. The result should be one list.

Extra credit if you solve it in one line. You can asume there is never an empty list/array and there will always be an integer.

Same meaning: 1 == 1

1 != -1

Examples:

[1,4,4,4,0,4,3,3,1] # should return [1,12,0,4,6,1]

"""So as you can see sum of consecutives 1 is 1 
sum of 3 consecutives 4 is 12 
sum of 0... and sum of 2 
consecutives 3 is 6 ..."""

[1,1,7,7,3] # should return [2,14,3]
[-5,-5,7,7,12,0] # should return [-10,14,12,0]

//My solution
import java.util.List;
import java.util.ArrayList;

public class Consecutives {
    
    public static List<Integer> sumConsecutives(List<Integer> s) {
        // your code
        int size = s.size();
        ArrayList result = new ArrayList<Integer>();
        
        for(int i = 0; i < size; i++){
          int sum = s.get(i);
          for(int j = i + 1; j < size; j++){
            if(s.get(i+1) == s.get(i)){
              sum = sum + s.get(i);
              i++;
            }
          }
          result.add(sum);
        }
        return result;
    }

}

//Best practice ( throws two NullPointerExceptions if the input itself is Null oder if der first Integer is Integer.MAX_VALUE )
import java.util.*;

public class Consecutives {
    
    public static List<Integer> sumConsecutives(List<Integer> s) {
      int previous = Integer.MAX_VALUE;
      LinkedList<Integer> l = new LinkedList<>();
      for (Integer v: s){
         l.add(v == previous? l.pollLast() + v : v); 
         previous = v;
      }
      return l; 
    }
}

//the one I think is clever
import java.util.ArrayList;
import java.util.List;

public class Consecutives {
    
    public static List<Integer> sumConsecutives(List<Integer> s) {
        List<Integer> accumulator = new ArrayList<>();
        for (int i = 0, sum = 0; i < s.size(); i++) {
            sum += s.get(i);
            if (i == s.size() - 1 || s.get(i) != s.get(i + 1)) {
                accumulator.add(sum);
                sum = 0;
            }
        }
        return accumulator;
    }

}
