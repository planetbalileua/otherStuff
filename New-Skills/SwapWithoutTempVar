Arithmetic Operators:

x = x + y;   
y = x - y;
x = x - y;
   
  or
x = x * y;  
y = x / y;  
x = x / y;  

e.g
x = 6 , y = 7
x = x + y; //6+7=13 
y = x - y; //13-7=6
x = x - y; //13-6=7

x = x * y; //6*7=42  
y = x / y; //42/7=6  
x = x / y; //42/6=7

∴ both successfully swapped

*********************************************************************************

XOR Swap:

https://en.wikipedia.org/wiki/XOR_swap_algorithm

Truth Table of XOR:
 x  |  y  |  Z
 --------------
 0  |  0  |  0
 --------------
 0  |  1  |  1
 --------------
 1  |  0  |  1
 --------------
 1  |  1  |  0
 
 
e.g 
 9 = 1001
 7 = 0111
 
 9 XOR 7 = 1110 = 14
 
 14 XOR 9 = 0111 = 7
 14 XOR 7 = 1001 = 9
 
 ∴ successfully swaped
 
  x = x ^ y; 
  y = x ^ y;  
  x = x ^ y;
 
 =============================================================================
 
 To be included in the library :
 #define swap(a,b) { a^=b, b^=a, a^=b; }   
              or
 #define swap(a, b) { a ^= b ^= a ^= b; }
 
 ********************************************************************************
 
 Potential Problems:
 From : http://www.geeksforgeeks.org/swap-two-numbers-without-using-temporary-variable/
 1) The multiplication and division based approach doesn’ work if one of the numbers is 0 as the product becomes 0 irrespective of the other number.

 2) Both Arithmetic solutions may cause arithmetic overflow. If x and y are too large, addition and multiplication may go out of integer range.

 3) When we use pointers to variable and make a function swap, all of the above methods fail when both pointers point to the same variable. Let’s take a look what will happen in this case if both are pointing to the same variable.

 // Bitwise XOR based method
 x = x ^ x; // x becomes 0
 x = x ^ x; // x remains 0
 x = x ^ x; // x remains 0

 // Arithmetic based method
 x = x + x; // x becomes 2x
 x = x – x; // x becomes 0
 x = x – x; // x remains 0

 Let us see the following program.

 #include <stdio.h>
 void swap(int *xp, int *yp)
 {
    *xp = *xp ^ *yp;
    *yp = *xp ^ *yp;
    *xp = *xp ^ *yp;
 }
 
 int main()
 {
  int x = 10;
  swap(&x, &x);
  printf("After swap(&x, &x): x = %d", x);
  return 0;
 }
 Run on IDE
 Output:

 After swap(&x, &x): x = 0
 Swapping a variable with itself may needed in many standard algorithms. For example see this implementation of QuickSort where we may swap a variable with itself. The above problem can be avoided by putting a condition before the swapping.

 #include <stdio.h>
 void swap(int *xp, int *yp)
 {
    if (xp == yp) // Check if the two addresses are same
      return;
    *xp = *xp + *yp;
    *yp = *xp - *yp;
    *xp = *xp - *yp;
 }
 int main()
 {
  int x = 10;
  swap(&x, &x);
  printf("After swap(&x, &x): x = %d", x);
  return 0;
 }
 Run on IDE
 Output:

 After swap(&x, &x): x = 10
 
